"""
Education Platform v2.0 - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å AI-–ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—Ç
"""
from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from contextlib import asynccontextmanager
import uvicorn
import os
import logging
import time
from prometheus_client import make_asgi_app, Counter, Histogram, Gauge
import sentry_sdk
from sentry_sdk.integrations.fastapi import FastApiIntegration
from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

from app.config import settings
from app.database import init_db, close_db, async_engine
from app.models import Base
from app.utils.cache import cache_manager
from app.middleware.logging import LoggingMiddleware
from app.middleware.rate_limit import RateLimitMiddleware
from app.utils.logger import setup_logging

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.routers import (
    auth, tasks, submissions, coins, shop,
    users, achievements, analytics, admin
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
request_count = Counter('app_requests_total', 'Total requests', ['method', 'endpoint', 'status'])
request_duration = Histogram('app_request_duration_seconds', 'Request duration')
active_users = Gauge('app_active_users', 'Active users count')
submission_processing = Histogram('submission_processing_seconds', 'Submission processing time')


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("Starting Education Platform v2.0...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    logger.info("Database initialized")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    await cache_manager.connect()
    if cache_manager.is_connected():
        logger.info("Redis connected")
    else:
        logger.warning("Redis not available, running without cache")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry –¥–ª—è production
    if settings.SENTRY_DSN and settings.is_production:
        sentry_sdk.init(
            dsn=settings.SENTRY_DSN,
            integrations=[
                FastApiIntegration(transaction_style="endpoint"),
                SqlalchemyIntegration(),
            ],
            traces_sample_rate=0.1,
            environment=settings.ENVIRONMENT,
            release=settings.APP_VERSION,
        )
        logger.info("Sentry monitoring initialized")

    logger.info("Application started successfully")

    yield

    # Shutdown
    logger.info("Shutting down Education Platform...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await cache_manager.disconnect()
    await close_db()

    logger.info("Application shutdown complete")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Education Platform API",
    description="AI-powered educational platform for handwriting assessment",
    version=settings.APP_VERSION,
    docs_url="/api/docs" if not settings.is_production else None,
    redoc_url="/api/redoc" if not settings.is_production else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS if settings.is_production else ["*"],
    allow_credentials=settings.CORS_ALLOW_CREDENTIALS,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["X-Total-Count", "X-Page", "X-Per-Page"],
)

# –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.add_middleware(GZipMiddleware, minimum_size=1000)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∞
if settings.is_production:
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*.education-platform.com", "localhost"]
    )

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ middleware
app.add_middleware(LoggingMiddleware)
app.add_middleware(RateLimitMiddleware, max_requests=settings.RATE_LIMIT_REQUESTS)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∏ —Ç–µ–≥–∞–º–∏
app.include_router(auth.router, prefix="/api/auth", tags=["üîê Authentication"])
app.include_router(users.router, prefix="/api/users", tags=["üë§ Users"])
app.include_router(tasks.router, prefix="/api/tasks", tags=["üìù Tasks"])
app.include_router(submissions.router, prefix="/api/submissions", tags=["üì∏ Submissions"])
app.include_router(coins.router, prefix="/api/coins", tags=["üí∞ Coins & Economy"])
app.include_router(shop.router, prefix="/api/shop", tags=["üõçÔ∏è Shop"])
app.include_router(achievements.router, prefix="/api/achievements", tags=["üèÜ Achievements"])
app.include_router(analytics.router, prefix="/api/analytics", tags=["üìä Analytics"])

# Admin —Ä–æ—É—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
if not settings.is_production or settings.DEBUG:
    app.include_router(admin.router, prefix="/api/admin", tags=["‚öôÔ∏è Admin"])

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
os.makedirs("uploads/submissions", exist_ok=True)
os.makedirs("static", exist_ok=True)

app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
app.mount("/static", StaticFiles(directory="static"), name="static")

# Prometheus –º–µ—Ç—Ä–∏–∫–∏ endpoint
if settings.PROMETHEUS_ENABLED:
    metrics_app = make_asgi_app()
    app.mount("/metrics", metrics_app)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": {
                "message": exc.detail,
                "status_code": exc.status_code,
                "path": request.url.path,
                "method": request.method,
                "timestamp": time.time()
            }
        }
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": {
                "message": "Validation error",
                "details": exc.errors(),
                "body": exc.body if settings.DEBUG else None
            }
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Unhandled exception: {exc}", exc_info=True)

    # –í production —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
    if settings.is_production:
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": {
                    "message": "Internal server error",
                    "status_code": 500
                }
            }
        )

    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": {
                "message": str(exc),
                "type": type(exc).__name__,
                "status_code": 500
            }
        }
    )


# Middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫
@app.middleware("http")
async def metrics_middleware(request: Request, call_next):
    """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è Prometheus"""
    start_time = time.time()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    response = await call_next(request)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    duration = time.time() - start_time
    request_duration.observe(duration)
    request_count.labels(
        method=request.method,
        endpoint=request.url.path,
        status=response.status_code
    ).inc()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
    response.headers["X-Response-Time"] = f"{duration:.3f}"

    return response


# –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
@app.get("/", tags=["General"])
async def root():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ UI"""
    if settings.is_production:
        return RedirectResponse(url="/static/index.html")
    return RedirectResponse(url="/api/docs")


@app.get("/api", tags=["General"])
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "features": {
            "ai_checking": settings.FEATURE_AI_CHECKING,
            "email_notifications": settings.FEATURE_EMAIL_NOTIFICATIONS,
            "social_login": settings.FEATURE_SOCIAL_LOGIN,
            "achievements": settings.FEATURE_ACHIEVEMENTS,
            "leaderboard": settings.FEATURE_LEADERBOARD,
        },
        "docs": "/api/docs" if not settings.is_production else None,
        "status": "operational"
    }


@app.get("/health", tags=["Monitoring"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    checks = {
        "status": "healthy",
        "timestamp": time.time(),
        "version": settings.APP_VERSION,
        "checks": {}
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try:
        async with async_engine.connect() as conn:
            await conn.execute("SELECT 1")
        checks["checks"]["database"] = "ok"
    except Exception as e:
        checks["checks"]["database"] = f"error: {str(e)}"
        checks["status"] = "degraded"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if cache_manager.is_connected():
        try:
            await cache_manager.set("health_check", "ok", ttl=10)
            checks["checks"]["cache"] = "ok"
        except:
            checks["checks"]["cache"] = "error"
            checks["status"] = "degraded"
    else:
        checks["checks"]["cache"] = "not configured"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
    checks["checks"]["ai_service"] = "ok" if settings.OPENAI_API_KEY else "not configured"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    status_code = status.HTTP_200_OK if checks["status"] == "healthy" else status.HTTP_503_SERVICE_UNAVAILABLE

    return JSONResponse(content=checks, status_code=status_code)


@app.get("/api/status", tags=["Monitoring"])
async def status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    from app.utils.monitoring import get_system_metrics

    metrics = await get_system_metrics()

    return {
        "status": "operational",
        "metrics": metrics,
        "uptime": time.time(),  # –í production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π uptime
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT
    }


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))

    if settings.is_production:
        # Production —Å Gunicorn –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ Dockerfile
        logger.info("Running in production mode")
    else:
        # Development —Ä–µ–∂–∏–º
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=port,
            reload=True,
            log_config={
                "version": 1,
                "disable_existing_loggers": False,
                "formatters": {
                    "default": {
                        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    },
                },
                "handlers": {
                    "default": {
                        "formatter": "default",
                        "class": "logging.StreamHandler",
                        "stream": "ext://sys.stdout",
                    },
                },
                "root": {
                    "level": settings.LOG_LEVEL,
                    "handlers": ["default"],
                },
            }
        )
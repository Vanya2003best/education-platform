"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–Ω–æ–º
–ó–∞–ø—É—Å–∫: python quick_fix.py
"""
import sys
from app.database import SessionLocal, sync_engine
from app.models import Base, User, UserRole
from app.auth import AuthService


def quick_fix():
    """–ë—ã—Å—Ç—Ä–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ª–æ–≥–∏–Ω–æ–º"""

    print("üîß Education Platform - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    print("=" * 60)

    db = SessionLocal()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = db.query(User).all()

        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("   –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            Base.metadata.create_all(bind=sync_engine)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                username="ivan",
                email="ivan@example.com",
                password_hash=AuthService.get_password_hash("ivan123"),
                full_name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                role=UserRole.STUDENT,
                coins=100,
                level=1,
                experience=0,
                is_active=True,
                is_verified=True
            )

            db.add(test_user)
            db.commit()

            print("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ivan / ivan123")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏
            print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π...")

            fixed_count = 0
            for user in users:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                test_passwords = {
                    "admin": "admin123",
                    "teacher": "teacher123",
                    "student1": "student123",
                    "student2": "student123",
                    "ivan": "ivan123"
                }

                expected_password = test_passwords.get(user.username, "password123")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–∞—Ä–æ–ª—å
                try:
                    is_valid = AuthService.verify_password(expected_password, user.password_hash)

                    if is_valid:
                        print(f"   ‚úÖ {user.username} - –ø–∞—Ä–æ–ª—å OK")
                    else:
                        print(f"   ‚ùå {user.username} - –ø–∞—Ä–æ–ª—å –ù–ï–í–ï–†–ù–´–ô, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")

                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
                        user.password_hash = AuthService.get_password_hash(expected_password)
                        fixed_count += 1

                        print(f"   ‚úÖ {user.username} - –ø–∞—Ä–æ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ '{expected_password}'")

                except Exception as e:
                    print(f"   ‚ö†Ô∏è  {user.username} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
                    user.password_hash = AuthService.get_password_hash(expected_password)
                    fixed_count += 1
                    print(f"   ‚úÖ {user.username} - –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")

            if fixed_count > 0:
                db.commit()
                print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π: {fixed_count}")
            else:
                print("\n‚úÖ –í—Å–µ –ø–∞—Ä–æ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")

        print("\n" + "=" * 60)
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!\n")

        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        users = db.query(User).all()
        for user in users:
            test_passwords = {
                "admin": "admin123",
                "teacher": "teacher123",
                "student1": "student123",
                "student2": "student123",
                "ivan": "ivan123"
            }
            password = test_passwords.get(user.username, "password123")
            print(f"   ‚Ä¢ {user.username:15} / {password}")

        print("\nüöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("   python -m uvicorn app.main:app --reload")
        print("\nüåê –ò –æ—Ç–∫—Ä–æ–π—Ç–µ: http://127.0.0.1:8000\n")

        return True

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        db.close()


if __name__ == "__main__":
    success = quick_fix()
    sys.exit(0 if success else 1)
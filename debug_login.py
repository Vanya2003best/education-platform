"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–Ω–æ–º
–ó–∞–ø—É—Å–∫: python debug_login.py
"""
import asyncio
from app.database import AsyncSessionLocal
from app.models import User
from app.auth import AuthService
from sqlalchemy import select


async def test_login():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞...\n")

    async with AsyncSessionLocal() as db:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("1Ô∏è‚É£ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'admin'...")
            result = await db.execute(
                select(User).where(User.username == 'admin')
            )
            user = result.scalar_one_or_none()

            if not user:
                print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username}")
            print(f"   Email: {user.email}")
            print(f"   Role: {user.role}")
            print(f"   Role type: {type(user.role)}")
            print(f"   Role value: {user.role.value if hasattr(user.role, 'value') else 'NO VALUE'}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
            print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è...")
            print(f"   –•–µ—à: {user.password_hash[:50]}...")

            try:
                is_valid = AuthService.verify_password("admin123", user.password_hash)
                print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {'–£–°–ü–ï–®–ù–û' if is_valid else '–ù–ï–£–î–ê–ß–ù–û'}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
                import traceback
                traceback.print_exc()
                return

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
            try:
                tokens = AuthService.create_tokens(user.id, user.role.value)
                print(f"   ‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã!")
                print(f"   Access token: {tokens['access_token'][:50]}...")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
                import traceback
                traceback.print_exc()
                return

            print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
            print("\n–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –ª–æ–≥–∏–∫–µ, –∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤:")
            print("   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ app/auth.py")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ middleware")

        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_login())